						Docker and Containers

					
							Docker

Docker is a tool that lets you package an application and everything it needs — code, libraries, configs — into a small portable unit called a “container.”

- Ensures app runs same way on any machine
- Can deploy, test, scale applications easily and reliably
- infrastructure is reproducible and consistent across environments


							Containers

A unit which bundles an application with all it's dependencies, ensuring it runs consistently. Containers will include:
- code
- run time
- libaries
- anything I need including dependencies that I need to run for application.
- All in one place!!!

							Essential Summary:

---------------------------------------------------------------

Containers are a box where you put your code, all dependencies (python, node.js) and the utensils/environment (OS libaries, runtime, etc.) All in one place. 

So with all of this in the same place, it ensures your application runs the same everywhere because we are shipping the WHOLE environment required to run the app. 

So then what is Docker???

Docker is the tool and platform which makes it easy to work with containers. 

Docker provides:

- A way to build images				> Snapshots of an application. (everything it needs etc)
- A way to run containers from those images 	> (Containers are just running instances of the image)
- A central place called DockerHub to store and share your images
- CLI/API interface making it easy to work with containers from the terminal



Tradtionally, apps would need to take a subset of the HOST OS (perhaps in a virtual machine) in order to run the application. This was inefficient.

You can run multiple containers ontop of the Operating system which reduces overhead and allows more containers (and therefore applications) to run on the same hardware.


Allows for collabaration with team. Write docker file, create docker image, then share with your team. 

						Conclusion

- Simplifies deployment by ensuring consistent environment
- improved efficiency with lightweight and fast starting containers
- enhances collabaration by making it easy to share environments
- Streamlines workflows by integrating seamlessly with CI/CD pipelines
 
------------------------------------------------------------------------------

						How to create Images

						We use a docker file

docker file contains series of instructuions that docker uses to assemble the image.

Will say:
- Which image to use
- Which files to copy into image
- Which command will be used to RUN the container
- Gives you step by step instructions on how to create a docker image
- Therefore, allows for repeatable builds


 							Docker Compose

Many apps today use multiple containers and the app requires all of them
Docker composes lets you define and run multi container docker applications using a simple YAML file
docker-compose-.yml



					

						Containers vs Virtual Machines


				Containers					Virtual Machine

- Lightweight and efficient isolation of apps		- Allows multiple OS to run on single machine
- Infrastructure -> Host OS -> Docker Enginer		- Infrastructure -> Host OS -> Hypervisor (Resource allocator)
- The docker engine runs the containers			- Within each app you have a guest OS
- Shares underlying OS. (No Guest OS)			- Each vm has it's own resources, libaries etc. for application
- Startup time is very quick				- Heavy to run, apps completely isolated
- More resource efficient				- Startup time long
- Process lvl Isolation (Shared OS)			- Consumes more resources
- Apps may get confused but typically this is efficient	- Strong isolation. Each VM has own OS
- High Portability					- Less Portability




						Docker Commands



1. docker --version				> Tells you what version you are running
2. docker info 					> Tells u info about docker
3. docker run [container name]			> Runs a container
4. docker build -t "Image-Name"			> Builds a docker image
5. docker ps -a (If I want to see all history)	> Shows you what docker containers are running
6. docker network ls				> Lists all current docker networks
7. docker network create [name of network]	> Creats a local network for docker containers
8. docker images				> Shows you list of docker images
9. docker logs <container name>			> logs of running container
10. docker compose up				> Runs the yml file. 
11. docker push -t "Image-Name"			> Pushes to Dockerhub. Image must be tagged with username/***
12. docker pull "Image-Name"			> Pulls images from dockerhub onto your local system
13. docker inspect [Image ID]			> Gives you more details about a specific image
14. docker rmi [Image ID]			> Removes images that are not being used by running containers.
15. docker system prune 			> remove all unused docker objects: containers, networks, images. 
16. docker stop [container ID]			> Stops running containers

When using docker push, images must be tagged with dockerhubusername/Imagename(:tag)
the :tag is optional. It's if you want to specify which release version you are on. (:v1 :v2 etc.)



					Dockerfile Commands

1. FROM						> Specifies base image to use for docker image. (Python/Javascript/node)2. RUN						> Executes command in the container. 
3. COPY						> Copies files from the host machine into the container (Like code)
4. WORKDIR					> Sets working dir for subsequent instructions / following commands
5. CMD						> Specfies which commands to run when application starts
						  This is the final instruction that sets the behaviour of the container




						Docker Networking

- When containers need to communicate with each other securely and efficiently, networking is cruical. 
- Networking concepts in docker is essential for managing Container networks efficiently. 
- Docker networking allows containers (apps) to communicate with one another by sharing data. 
- Docker network simplifies microservices of an application. Microservices is when different parts of an application      each run indepentely with their own container but communicate with one another seamlessly. Allows you to easily         connect and scale your application as service grows.

						Bridge Network

- The default network mode for containers on the same machine. Containers use their own ip to communicate together.

						Host Network

- Container uses host machine network directly without any isolation. As if container is plugged into home network. 
- This is useful for apps which need to closely interact with home system

						None Network

- Gives container no network at all. Completely Isolated container. 



						
						Docker Compose

- A tool used for managing multi container applications. Instead of manually starting and stopping containers one by one, docker compose lets you define all your services in a single file and manage them collectively. 


						Yml file.

- Lists all the services your application needs. Says which image to use, which port to expose and how containers should interact with each other. Can spin up entire environment with single command.

- Docker compose automatically creates a custom network for your containers.  

- YOU CAN USE IMAGES SAVED ON ECR within the yml file. 


						Docker Registaries



- Docker Registaries manage, store and deploy your docker images. They are storage and distribution hub for docker image
- AWS ECR is a Docker image registry managed by AWS. Can push and pull images from AWS ECR.
- Docker registaries are like online libaries.
- Public Registries: Share images with the world or use community provided images
- Private Registries: Like AWS ECR. Secure and restricted registries.
- Streamline the deployment process. Easily accessed and deployed across multiple environments. 
- Enhances collaboration. Everyone on team has access to same resources. 
- Ensures consistency across different environments
