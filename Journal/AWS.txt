							EVERYTHING AWS

							Intro


- AWS is very flexible. Has a service for whatever you want. Virtual machine, storing data, automating infrastructure.
- Only pay for what you use. 

							AWS Regions:

- Physical locations worldwide where AWS has data centers. Large clusters of AWS infrastructure spread out globally. 

							Choosing Regions:

- Want regions closest to users for latency reasons.
- Compliance reasons. (If working in countries with strict data laws).
- Pricing. AWS pricing can vary from region to region
- Avalibility zones (AZ's). Within regions, there are AZ's, which is a cluster of data centers in a region. 
- By spreading AZ's across AZ's can achieve Higher Availibily and tolerece. If one AZ goes down (physically), service can spin up another AZ. 
- Edge locations: part of AWS content delivery network. Helps distributing content to users quickly by caching it closer to where they are.  


							Root User

- The root user has unrestricted access to everything. This is why it is not best practice to work with the Root User
- Instead, we create IAM users and assign them appropriate permissions either directly or through group permissions. 



							IAM




- Can create users and groups to manage access permissions to AWS resources. 
- Policies > What users/groups can/cannot do in AWS. 
- Can Provide temp. access through roles. Great if you need to give individual/services temp access. 
- Make sure to only give users the exact access they need to do their job. Not more. (Least Privilege Principle)
- Inline policies are policies that only apply  to a specific user.

IAM policies: Who can do what and when. Can write from scratch or use prebuilt policies. 

- Will have version of policy. 
- "ID" > Policy name
- Effect > What the policy does. (Allow/Deny access)
- Principal > Which users/groups policy will apply to
- Action > What the effect is applying to.
- Resource > What the action applies to (S3bucket, EC2 etc.)

IAM Password Policies: 

- Can set password policies to make sure everyone is using strong and secure passwords. 	
- Can require min pw length, special cases, numbers, Require users to change pw's after some time (pw expiration) and prevent pw re-use

MFA: Multi Factor Authentication

- Users have access to accounta nd can change config's or delte resources in AWS account. Can spin up resources like even bitcoin mining. 
- So want to protect root account and IAM users. This is where MFA comes in. Even if someone guesses pw, people still can'tlog in. 

Access Keys: 

- Access Keys are used to access AWS from the CLI. 
- Public Access key is like the lock to the house, easily viewable by logging into account
- Private Access Key is secret. Keep stored in a safe and private place.

AWS SDK:

- Basically this is similar to a script but it's used to automate tasks through code like python. 
- It's stored and ran in the container with the rest of the project.


IAM Roles for Services: (Set of temp. keys given to services for secure access)

- Sometimes, services need to complete actions on your behalf. Like EC2 may want to read from S3 bucket. 
- Don't want to hardcode aws credentials (obviously) into these services.
- IAM Roles lets AWS services get temp. access to other AWS services without giving access keys or passwords.
- EC2 instance roles: permission to access s3, dynamodb
- Lambda Function Roles: Can attach relevant permissions so lambda function can do it's job. 
- CloudFormation Roles: Needs to create and manage resources across aws services. So needs necessary roles. 


IAM Security Tools: Helps manage Users and their permissions 

- IAM Cerdentials Report: Lists all users and status of their credentials.
- IAM Access Advisor: Shows services permissions granted to user and when last acessed. Use to revise policies.
- All about Least permission Principles. Only give users access to what they need.



					


						EC2 & Compute




- Compute usually means the power behind running your applications.
- Traditionally this was physical servers which you would own and maintain.
- But now AWS takes care of the phyiscal part and you can focus on what you want servers to do.


EC2: "Elastic COmpute Cloud"  >  Part of 'Infrastructure as a Service' . ONLY PAY FOR WHAT YOU USE

- EC2 is the most popular AWS service. 
- Rent virtual machines. (EC2) (Choose OS, Configure based on needs)
- Storing Data on virtual Drives (EBS) > Like a hard drive for EC2 instances
- Distributing load across Machines (ELB)  > Just Load balancers for EC2 instances. Distributes traffic across EC2's
- Scaling the services using auto scaling groups (ASG).  > Allows EC2 to scale automatically.


EC2 Sizing and Configiration:

Configuration options for your virtual machine: Wrong sizing can cause underperformance or over paying.
	- OS
	- Computer Power & Cores
	- RAM
	- Storage Space: (Network Attached EBS/EFS)  or	 (Hardware EC2 instance Store)
	- Network Card: Speed of card, Public IP address (Makes it accessible from the internet)
	- Firewall rules: Security Groups
	- Bootstrap script: Runs automatically when Instance launches. 


EC2 User Data Script

- A script that automatically runs when instance launches for first time. Good way to bootstrap instance. 
- Install updates. Install Sofware (nginx etc.). Download files, packages, config files, app code. 
- Any automation tasks you want to run when machine boots up, you do here. 
- Script only runs when you first launch instance. Designed for set up tasks.
- Runs with root user. Has full control over the system. Be careful what you include in this script. 
- For DevOps, this is a huge time saver when setting up multiple instances.

For example:

	Task				Should You Use User Data?

apt update && apt install		✅ Yes — common use case
Install AWS CLI				✅ Yes — good example
Install NGINX or Apache			✅ Yes
Pull code from GitHub			✅ Yes
Create users / set passwords		✅ Yes
Set up cron jobs			✅ Yes
Start background processes		✅ Yes
Run a Python app			✅ Yes
Schedule a shutdown			✅ Yes


EC2 Instance Types - Overview

- General Purpose		> Go to Well rounded Instances. Work for a variety of usecases. 
- Compute Optimized		> Extra CPU. If you need more power. 
- Memory Optimized 		> Things like databases, high workloads
- Storage Optimized 		> Fast and High throughput storage. (Quick access to storage)
- Accelerated Computing		> Machine learning, video processing, scientific simulations
- HPC Optimized			> Intensive Computing tasks that require fast networking and powerful processing

Naming Conventions for EC2 instances:

Example EC2 instance name:     m 5 . 2 x large    

(m > General purpose) (c - compute optimized) (r - memory optimized)

5 - the generation of the instance. AWS improve instances over time. 

2 x Large - The size within the Instance class. (Bigger class = more resources)
 

EC2 Purchasing Options: 

- On demand instances: Short workload, predictable pricing, pay by the second.
- Reserved (1 or 3 yrs): Offers discount in exchange for longer commitment.. 2 types
	- Standard: For long workloads
	- Convertible reserved instances: gives flexibility to change instant type over time
- Saving Plans (1 or 3 yrs): Provides a discount for commitment to a certain amount of usage. (choose how to use it)
- Spot instances - Bid for unused EC2 capactiy at much lower price. AWS can take back instance when needed.
- Dedicated Hosts: Full control and visibility of hardware. Book entire phyiscal server. (Good for legal needs)
- Dedicated Instances: Ensure no other aws customer will share underlying hardware with you. More isolation.
- Capacity Reservations: Reserve Capacity in specific AZ for any duration





						Security Groups (SG)




- Control how traffic flows into and out of EC2 instances. (Virtual firewalls)
- Backbone of network security for EC2 instances. 
- Security groups only deal with Allow rules. Anything that isn't explicitly allowed is blocked by default.
- SG's outbound traffic is Allowed by default 
- If you allow inbound traffic, corresponding outbound traffic is automatically allowed.
- Control which ports are open on your instance. (HTTP is port 80) (SSH is port 22) (Can have auth IP ranges)
- Controls Inbound/Outbound traffic. (0.0.0.0/0 means open to the whole world)
- Can set up Custom TCP rule (specify port etc.)
- Can attach same SG to multiple instances. SG's are locked to specific locations. 
- Traffic meets SG first, so if EC2 instance is not seeing traffic, check the SG.
- Good practice: Have 1 SG dedicated just for SSH access to tightly control who can access via SSH.  


Referecning other SG:

When managing multiple EC2 instances, each with their own Security Groups, referencing specific IP addresses can break
if those instances are replaced or their IPs change (e.g., due to autoscaling).

To solve this, you can reference one Security Group from another, which dynamically allows traffic from any EC2 
instance attached to that group, regardless of its current IP.

This ensures your infrastructure stays flexible and scalable, without having to update rules manually.


Classic Ports to know: 

22: SSH
21: FTP (File Transfer Protocol) - Upload files into a file share
22: SFTP (Secure File Transfer Protocol) - Upload files using SSH
80: HTTP - access unsecured websites (Web servers that do not use Encryption)
443: HTTPS - access secured websites (Encrypts using TLS that works over TCP)
53: DNS - For DNS quesries and resolving. This port is responsible for translating domain names to IP's
3389: RDP (Remote Desktop Protocol) - log into a windows instance. Used for management of EC2 based Windows instances.i


Elastic IP's

- If you need a fixed public IP for your instance (due to stopping and starting maybe done by ELB), then you can
  use Elastic IP's. An Elastic IP is a public IPv4 IP you own as long as you don't delete it. 
- Elastic IP's are only charged when not in use. Useful if external services point to instance using static IP.
- Ensures no disruption when restarting instances.

- Try to avoid using Elastic IP's. They reflect poor architecture design. Instead use random public IP and register DNS name or use a Load Balancer. 



					

							STORAGE



EBS Volume:

- An EBS volume is a network drive that you can attach to your instances. Not a physical drive. It's a virtual storage.
- Allows instances to persist data even when stopped/terminated. Data on EBS volume remains intact.
- Bound to availibility zone. Can't move it across zones. But can snapshot and create new ones if needed. 
- Ideal for situations where you need to store data for long periods. 
- EBS volumes very useful for keeping data safe in the cloud. 



AMI: Amazon Machine Image

- A blueprint for launching EC2 instances
- It's a pre-configured template that contains all the info needed to launch an EC2 instance. 
- Customization of an EC2 Instance. Prepackaged. 
- AMI's save time. All the software, config etc. 
- Faster boot times and less time spent on manual steps.


Amazon EFS: Elastic File System   > Key note: Used for storing and sharing FILES. 

- Amazon's solution for shared file storage. A network drive basically 
- Managed network file system that allows you to make shared file system that's mounted on multiple instances simultaneously
- EC2's can read/write to EFS's concurrently
- Copies stored across multiple AZ's. If one AZ goes down, backup's are available. Also makes it highly available. 
- Scalable! Grows automatically as you add data. Pay per use. 
- Linux can mount EFS onto the OS and treat it as if it were a local disk. Easily accessible... Convenient. 
- Easy to share data across mutliple EC2 instances. 
- EFS can be expensive. 3x the cost of a standard SSD. 





						Load Balancing and Scalability





- Scalability means application/system can handle increasing loads as demand grows. (Self evident) 2 types:

High availibility: means system is always up and running by running app/system in multiple location so if one part
fails, another can take over. Goes hand in hand with horizontal scaling. (Run app in more than 1 AZ). Survive data
centre loss. Ensures app is always available to users.  


Vertical Scalability: Adding more power to existing system. t2 micro instance scales up to maybe t2 large etc. 
Used in: Non distributed systems such as databases. Hardware limit to how far you can vertically scale. (Check Price)


Horizontal Scalability: Add more instances of a resource to handle the load. (adding more servers) (Elasticity)
Horizontal scalability is very common in modern applications and cloud structures. Flexible. Scale up or down.
Can use auto scaling groups to automate the system. Very easy. Also makes your application very resiliant.  


Load Balancing (ELB): Elastic Load Balancers. Offers a Single Point of Address. (Public IP). Managed/Maintained by AWS.

A way to distribute incoming traffic/requests across multiple servers so app does not get overloaded. 
Constantly checks which EC2 instances are healthy and directs traffic towards servers which can handle it. Managed by
AWS and easily configurable. Handles system failures. Stops traffic to servers that are down. 
Does regular health checks. Can handle SSL encryption/decryption. So instances instead just handle app logic.
Ensures stickiness of cookies (Users are stuck to same session on specific server so temp. data is not lost)
Fully integrated with other AWS offerings (EC2, EC2 ASG, Amazon ECS, Route 53 etc.)

Health Checks by ELB's: Enables Load Balancers to know if instances are healthy.
 
Checks health of instances by sending requests to certain port and root. Sends HTTP request to port 4567 and checks 
response. Health Checks are automated and keeps everything running smoothly. 

Reverse Proxy: Similar to load balancer. Sits between app and users handling requests but handled manually by you.


						Types of ELB's on AWS:

Session Stickness is applied across all load balancers. It uses cookies. Can set how long cookies and stickness lasts by
setting epiration data. Use if server stores session data which is not shared across instances. Temp. files.

When stickiness is enabled, you can overload an instance if too many clients stuck to it. 
Can lead to imbalanced traffic distribution. 


1. Classic Load balancer. (Old generation. Not commonly Used)
- Supports basic HTTP, HTTPS, TCP, SSL traffic

2. Application Load Blanancer. (Operates at Layer 7 Application Layer)

- Supports HTTP, HTTPS, WebSocket. Also of course load balances between instances.
- Can route traffic to different target groups (Lambda functions, s3 buckets, EC2 instances...)
- Can route based on URL path or Host name in URL. 
- Has a port mapping feature to redirect to dynamic port in ECS.
So ALB's can route traffic to different target groups (maybe using URL path mapping) and each target group will have
many servers which the ALB will then load balance between. This is great for splitting up traffic between the different
services you app may offer making your entire app infrastructure more modular and managabe.  
- Target Groups: Groups of instances that ALB will route traffic to. 
- Each ALB has a fixed hostname provided for by AWS. If need something more custom, use domain name and point it to 
host name.
- Can set ALB's to forward client IP to Server Instances, if server requires it (for example to geo-locate)
- Does handle SSL termination and of course Inspects HTTP headers.


3. Network load Balancer. (Operates at Layer 4 Transport Layer)

- Built for TCP and UDP traffic. High performance, low latency. Handles millions of requests per second.
  Also load balances between servers. Lightning fast response time.
- Assigns a static IP per AZ. If you need predictable static end point to connect to (like for whitelisting).
- Can also direct traffic to ports/target groups. 
- Can allow HTTP through but does not handle SSL decryption or Inspect HTTP headers. 
  


4. Gateway Load Blancer. (Operates at Layer 3 Network Layer. Works with IP protocol)


- Help deploy, scale and manage third party network applications like firewalls, intrusion detection and traffic 
analysers. So the GLB doesn't load balance between app instances or backend server instances, it literally scales 
network packets between firewall instances or other third party network app instances. 

ELBs can be set up as Internal (Private ones) or External (Public ones)


Load Balancer Secruity Groups:

- Set SG config for Load balancers. Very important!


					SSL/TLS (SSL just means TLS today)

- SSL: Secure Socket Layer
	Ensures traffic between clients and servers are encrypted in transit. (In flight encryption)

- TLS: Transport Layer Security (Modern version of SSL)

SSL/TLS certificates provided for by Authorities: (Comodo, Symantec, GoDaddy, GlobalSign, Digicert etc.)

SSL certificates have an expiration date that you set (when you must renew). If SSL certificate expires, users
will be warned before connecting to your server.


ACM: AWS tool for managing certificates. Load balancers use SSL certificates automatically. 
	- Need to configure ALB and NLB to use SSL that you set up using ACM.


HTTPS Listener: When setting up HTTPS Listener on load balancer, this is what ensures traffic is encrypted.
	- Need to specify default SSL certificate.
	- Can add multiple certificates to handle traffic to multiple domains. 
	- Server name Indication (SNI): Clients can use SNI to connect to specific host name with correct SSL cert.
	- SNI allows users to connect to independent websites, on the same server.


Connection Draining: Gracefully shutting down EC2 instances
	- Rather thne cutting off user connections, connection draining allows in flight requests to finish gracefully.
	- Very useful when autoscaling groups are being used as instances are being stopped and started continuously.



Auto Scaling Groups: Adjusts the number of running EC2 instances based on load. 
	- Automatically registers new instances to a load balancer
	- Can enforce min/max/desired EC2 capacity instance settings. 
	- If instance is unhealthy/terminated, ASG automatically re-creates it. ASG's are also free.
	- Can use AMI (Amazon Machine Image) for config details when creating new instances.



Auto Scaling groups (ASG) Launch Template: Config settings.
	- Ensures when ASG add's new instances, they are setup with same config. 
	- AMI. Preconfigured EC2 image. Instance type. User data setup 
	- EBS Volumes. Persistent storage for instances
	- Security Groups
	- SSH Key Pair
	- IAM Roles for other services maybe?
	- VPC+Subnet information
	- Load Balancer Info so it automatically registers new instances with it.      



CloudWatch Alarms:

- Keeps an eye on certain metrics like : CPU, MEMORY, etc. You set. 
- If Cloudwatch alarm triggers, ASG's can take action. Can scale out if necessary (Increase no. of instances)
- Scaling policies: (Example: night time, decrease instances)
- Moral of the story is: Cloudwatch is amazing. Cloudwatch automates based on realworld metrics. Amazing!


ASG Scaling Policy options:

- Dynamic Scaling: Simple to set up. Maintain CPU usage at 40%. (Will add/remove instances to maintain policy)
- Simple/Step Scaling: Based on Alarmy. When CPU usage is > 40%, add instances etc. Gives more granular control.
- Scheduled Scaling: Responding to demand at different times/future. For predictable load patterns. 







						Containers on AWS




Storage for Containers:		Dockerhub (Public Images)	or 	Amazon ECR (Amazon Elastic Container Registry)

Amazon ECR: Integrates Deeply with AWS services and provides secure storage. Store Public/Private Images. 
Amazon ECS: Amazons own Container Orchestration platform. Like Docker but AWS run. 
Amazon EKS: Amazon Elastic Kubernetes service. (open source). (Intergrates Kubernetes with AWS)
AWS Fargate: Serverless Container Platform that works with ECS and EKS. (Manages all infrastructure automatically for containers)


Amazon ECS: Run and Manage containers on AWS. Has different Launch types.  

EC2 Launch type:
 
- You are responsible for the infrastructure. EC2 instances are where containers will run.
- Each EC2 instance must run ECS agent. ECS agent is what registers instance in ECS cluster making it able to run cont.
- ECS takes care of starting and stopping containers automatically but you manage the infrastructure.
- Great if u want to manually manage infra. 

Fargate Launch type: (Serverless) 

- Do not manage any EC2 instances. No infra to manage at all. AWS handles all of it. 
- Only need to define CPU/Memory limit and AWS runs everything for you. 
- Task defintions: Configures AWS on how to run containers with required hardware/network settings.
- Automatically handles adding more containers and EC2 instances automatically. 
- Just define containers, and fargate ensures they run efficiently. 



IAM roles for ECS: (Service roles)


- With the EC2 launch type, you will work with 2 IAM roles: 
	
	- EC2 Instance profile (Used by ECS agent) - Gives permissions to interact with other AWS services
		- Allows API calls to ECS to update cluster. Send logs to cloudwatch. Pull docker images from ECR...
		- Makes sure ECS agent can do it's job by giving it necessary authority. 

	- ECS Task Role: Each container run has it's own task role. Defines what permission task has while running
		- Different containers might need access to different containers. 
		- Can lock down exactly what each container is allowed to do. 
		- Ensures each container can interact with relevant services without giving too much power.



Amazon ECS Load Balancer Integrations: Which one is used for ECS cluster?

- ALB: Go to choice for most ECS setups. Aware of HTTP/HTTPS. Ideal if dealing with web apps and can be path based. 
- NLB: Super fast and works for TCP/UDP traffic. High throughput and low latency.


ECS Auto Scaling

- Automatically adjusts the number of ECS tasks running based on demand. 
- If traffic spikes, ECS will scale up number of tasks.
- Uses AWS autoscaling to make decisions (CPU usage etc.)
	- Target Tracking: Can set targets and ECS auto scaling will scale based on these targets.  
	- Step Scaling: Scales based on Alarms
	- Scheduled Scaling - Scale based on specified date/time

If using ECS Fargate, auto scaling happens automatically. Much easier to set up because it is serverless. 






						ServerLess





- Do not need to manage any servers/infra at all. You just deploy your code. 
- Function based deployments. Uses Lambda functions. Function as a service.
- Serverless does not mean no servers. You just don't manage the servers.
- AWS manages the servers behind the scenes.


Types of Serverless in AWS:

- AWS Lambda: Write a code in a function. Upload it. AWS Lambda runs it.
- DynamoDB: Serverless NoSQL database that scales automatically. 
- AWS Cognito: Helps manage user authentication. Manage logins in application
- AWS API Gateway: Bridge between users and Lambda functions. Create and Monitor API's that interact with your backend.
- Amazon S3: Storing Files and static content. Completely serverless and scales based on data stored. 
- AWS SNS & SQS: Helps with communication and notification between services. 
- And more...


Why use AWS lambda instead of EC2?


				EC2			vs			Lambda

- Virtual servers in the cloud					- No servers to manage.
- Limited RAM and CPU						- Short executions. Run time limit of 15min.
- Continuosly Running 						- Runs on demand. Only runs when needed.
- Need to manually set auto Scaling config.			- Automated Scaling.
								- Easy Pricing. Only pay for what you use.
								- Integrated with all AWS services
								- Integrated with many programming languages
								- Easy monitoring through cloudwatch
								- Lets you scale resources for functions



Lambda can actually also run container Images. Make sure container implements lambda runtime api.


OKAYYY I UNDERSTAND LAMBDA NOW.

LAMBDA IS USED FOR SHORT EXECUTION TASKS WHICH ONLY RUN ON DEMAND WHEN NEEDED, LIKE PERHAPS TRIGGERED BY AN EVENT
YOU SET SUCH AS A CLOUDWATCH ALARM OR AN UPLOAD INTO AN S3 BUCKET. INSTEAD OF RUNNING SERVERS 247 TO COMPUTE SIMPLE
TASKS, WE JUST USE LAMBDA FUNCTIONS TO COMPUTE THESE TASKS SERVERLESSLY AND WE ONLY PAY WHILE THE FUNCTION IS RUNNING

 						





						AWS Networking





CIDR: A method for allocating IP addresses. 

Contains a base IP. This represents an IP contained in the range. 
Then the subnet mask defines how many bits can change in the IP. /0 /8 /16 /24 /32 etc. 
Each IP number in IPV4 can go up to 255


Ok. VPC's are very imporant. They are like an internal Private network within the AWS framework. They allow your 
different AWS software to easily communicate with one another by traversing through Private networks as opposed to the
WAN.


Default VPC: Made upon account creation
-If making an EC2 instance, it will run on this default VPC unless otherwise specified. 


Subnets: Smaller networks within your VPC. Each VPC is divided into smaller subnets. Subnets can be public/private.
	- AWS Reserves 5 IP adresses in each subnet for necessary use which are not usable.


Internet Gateway: Allows resources in VPC like EC2, ECS etc. to connect to the internet
	- Gateway that instances can send/recieve data to the outside world.
	- Scales horizontally easily. Highly available and redundant. 
	- Internet Gateway's not created by default at VPC creation. Only 1 gateway can be attached to a VPC. 
	- Route tables for subnets must also be updated.  


Bastion Host -SG: An EC2 instance that sits in public subnet that can SSH into private backend subnet. 


NAT Gateway (Network Adress Translation): 

- Managed service provided by AWS that allows instances in private subnet to connect to internet.
- But it blocks incoming traffic from internet. Allows Private instances to reach internet without exposure to internet.
- Used to install Software etc. AWS manages this. Pay per hour for usage. Tied to specific AZ and tied to elastic IP. 
- If you want redundancy across zones, create multiple NAT gateways in different zones. 
- NAT gateway needs internet Gateway to access the internet. 
- Great for maintaining tight security with access to internet for updates or other services. 
- If your infra is spread across AZ's, Make sure to also spread AZ's to make sure of High Availibility.
- High availibility within AZ 
- Automatically scales
- Can handle up to 100Gbps


NAT Instance: (An EC2 instance which acts as a NAT)

- Needs to use a fail over script to switch to a different instance. 
- Bandwith, Cost etc. depends on EC2 instance type. 
- Managed by you. You need to take care of software updates, OS patches etc.
- Can also be used as a Bastion Host.
- You must set up the Security Groups.


NACL (Network Access Control List): Like a firewall which controls traffic to/from subnets.
	- All subnets get assigned default NACL.
	- 1 NACL per subnet. 
	- Applies to everything in the subnet. (Must define inbound/outbound rules explicitly)
	- The last rule is a * which denies all traffic which has not found any rule match.    


SG's work at the EC2 instance level! They decide what traffic comes in/out of the actual server. 
SG's are statefull. If inbound/outbound traffic is allowed the response is allowed by default. 

NACL work at the subnet level. NACL's are stateless. This means need to specify incoming/outbound traffic independently.


VPC Peering: A way to privately connect 2 VPC's using AWS's internal network. When peered, VPC's behave like 
they are part of the same network. This means no traffic flows through public internet. Can not have overlapping CIDR's 
otherwise AWS will not allow this pairing. Need to also update the route tables to ensure traffic can flow through the
Peered VPC's.  	


VPC Endpoints (AWS PrivateLink):

- Allows you to connect to AWS services using a private network instead of going over the public internet. 
- Big secuirty win! You're not exposing VPC to internet. 
- This setup is reduntant and scales horizontally. No need for internet gateways or NAT gateways. 

Types of VPC Endpoints:

1) Interface Enpoints
	- Creates a Private IP adress as an entry point. Pay per hour + per GB of data processed. 
	- Need to attach a secuirty group to manage traffic going to and from instances. 

2) Gateway Endpoints
	- Do not create a Private IP. Instead they create gateway which you must target in route tables. 
	- Supports S3 and DynamoDB. This is Free.
